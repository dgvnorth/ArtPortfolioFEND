{"ast":null,"code":"var _jsxFileName = \"/home/david/Desktop/ArtistPortfolio_react/frontend/src/screens/LoginScreen/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // Redux\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../store/actions/userActions\"; // My components\n\nimport FormField from '../../components/FormField'; //Assets\n\nimport classes from \"./LoginScreen.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginScreen = props => {\n  _s();\n\n  const {\n    history\n  } = props;\n  const dispatch = useDispatch();\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const formConfig = {\n    email: {\n      type: \"input\",\n      config: {\n        type: \"email\",\n        placeHolder: \"Your Email\"\n      }\n    },\n    password: {\n      type: \"input\",\n      config: {\n        type: \"text\",\n        placeHolder: \"Your Password\"\n      }\n    }\n  }; // Prepare for formState objects\n\n  const formElements = [];\n\n  for (let key in formState) {\n    formElements.push({\n      id: key,\n      setup: formConfig[key]\n    });\n  }\n\n  const inputChangeHandler = (event, inputIdentifier) => {\n    formElements.forEach(formElement => {\n      if (inputIdentifier === formElement.id) {\n        setFormState({ ...formState,\n          [inputIdentifier]: event.target.value\n        });\n      }\n    });\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(login(formState.email, formState.password));\n  }; // Check if login success\n\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      history.push('/admin');\n    }\n  }, [userInfo, history]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.screen_cointainer,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Administrator Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), formElements.map(formElement => /*#__PURE__*/_jsxDEV(FormField, {\n        type: formElement.setup.type,\n        config: formElement.setup.config,\n        value: formElement.value,\n        changed: event => inputChangeHandler(event, formElement.id)\n      }, formElements.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"Submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginScreen, \"znEfOppXoGB1WiQKhZysYYh5tak=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/home/david/Desktop/ArtistPortfolio_react/frontend/src/screens/LoginScreen/index.js"],"names":["React","useState","useEffect","useDispatch","useSelector","login","FormField","classes","LoginScreen","props","history","dispatch","formState","setFormState","email","password","userLogin","state","userInfo","formConfig","type","config","placeHolder","formElements","key","push","id","setup","inputChangeHandler","event","inputIdentifier","forEach","formElement","target","value","submitHandler","e","preventDefault","isAdmin","screen_cointainer","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\n\n// Redux\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { login } from \"../../store/actions/userActions\"\n\n// My components\n\nimport FormField from '../../components/FormField'\n\n//Assets\nimport classes from \"./LoginScreen.module.css\"\n\n\nconst LoginScreen = (props) => {\n    const { history } = props\n    const dispatch = useDispatch()\n    const [ formState, setFormState ] = useState({\n        email: \"\",\n        password: \"\",\n    })\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n    const formConfig = {\n        email: {\n            type: \"input\",\n            config: { type: \"email\", placeHolder: \"Your Email\" },\n        },\n        password: {\n            type: \"input\",\n            config: { type: \"text\", placeHolder: \"Your Password\" },\n        },\n    }\n\n    // Prepare for formState objects\n    const formElements = []\n    for (let key in formState) {\n        formElements.push({ id: key, setup: formConfig[key] })\n    }\n\n    const inputChangeHandler = (event, inputIdentifier) => {\n        formElements.forEach((formElement) => {\n            if (inputIdentifier === formElement.id) {\n                setFormState({\n                    ...formState,\n                    [inputIdentifier]: event.target.value,\n                })\n            }\n        })\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(formState.email, formState.password))\n    }\n\n    // Check if login success\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            history.push('/admin')\n        }\n    }, [userInfo, history])\n\n\n    return (\n        <div className={classes.screen_cointainer}>\n            <form onSubmit={submitHandler}>\n            <h2>Administrator Login</h2>\n                {formElements.map((formElement) => (\n                    <FormField\n                        key = {formElements.id}\n                        type = {formElement.setup.type}\n                        config = {formElement.setup.config}\n                        value = {formElement.value}\n                        changed = {(event) => inputChangeHandler(event, formElement.id)}\n                    />\n                ))}\n            <button type='Submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}