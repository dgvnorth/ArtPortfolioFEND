{"ast":null,"code":"import axios from \"axios\";\nimport { GET_IMAGES_REQUEST, GET_IMAGES_SUCCESS, GET_IMAGES_FAIL, CREATE_IMAGE_REQUEST, CREATE_IMAGE_SUCCESS, CREATE_IMAGE_FAIL, CREATE_IMAGE_RESET, IMAGE_DETAILS_REQUEST, IMAGE_DETAILS_SUCCESS, IMAGE_DETAILS_FAIL, UPDATE_IMAGE_REQUEST, UPDATE_IMAGE_SUCCESS, UPDATE_IMAGE_FAIL, UPDATE_IMAGE_RESET, DELETE_IMAGE_REQUEST, DELETE_IMAGE_SUCCESS, DELETE_IMAGE_FAIL } from \"../constants/imageConstants\";\nexport const getImages = (pageNumber = '', pageSize = '') => async dispatch => {\n  try {\n    dispatch({\n      type: GET_IMAGES_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/image?pageNumber=${pageNumber}&pageSize=${pageSize}`);\n    dispatch({\n      type: GET_IMAGES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_IMAGES_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createImage = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_IMAGE_REQUEST\n    });\n    const {\n      userLogin: userInfo\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/image\", {}, config);\n    dispatch({\n      type: CREATE_IMAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_IMAGE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getImageDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: IMAGE_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/image/${id}`, config);\n    dispatch({\n      type: IMAGE_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: IMAGE_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteImage = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: DELETE_IMAGE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/image/${id}`, config);\n    dispatch({\n      type: DELETE_IMAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_IMAGE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateImage = image => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: UPDATE_IMAGE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/image/${image._id}`, image, config);\n    dispatch({\n      type: UPDATE_IMAGE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_IMAGE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/david/Desktop/ArtistPortfolio_react/frontend/src/store/actions/imageActions.js"],"names":["axios","GET_IMAGES_REQUEST","GET_IMAGES_SUCCESS","GET_IMAGES_FAIL","CREATE_IMAGE_REQUEST","CREATE_IMAGE_SUCCESS","CREATE_IMAGE_FAIL","CREATE_IMAGE_RESET","IMAGE_DETAILS_REQUEST","IMAGE_DETAILS_SUCCESS","IMAGE_DETAILS_FAIL","UPDATE_IMAGE_REQUEST","UPDATE_IMAGE_SUCCESS","UPDATE_IMAGE_FAIL","UPDATE_IMAGE_RESET","DELETE_IMAGE_REQUEST","DELETE_IMAGE_SUCCESS","DELETE_IMAGE_FAIL","getImages","pageNumber","pageSize","dispatch","type","data","get","payload","error","response","message","createImage","getState","userLogin","userInfo","config","headers","Authorization","token","post","getImageDetails","id","deleteImage","delete","updateImage","image","put","_id"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { \n    GET_IMAGES_REQUEST,\n    GET_IMAGES_SUCCESS,\n    GET_IMAGES_FAIL,\n    CREATE_IMAGE_REQUEST,\n    CREATE_IMAGE_SUCCESS,\n    CREATE_IMAGE_FAIL,\n    CREATE_IMAGE_RESET,\n    IMAGE_DETAILS_REQUEST,\n    IMAGE_DETAILS_SUCCESS,\n    IMAGE_DETAILS_FAIL,\n    UPDATE_IMAGE_REQUEST,\n    UPDATE_IMAGE_SUCCESS,\n    UPDATE_IMAGE_FAIL,\n    UPDATE_IMAGE_RESET,\n    DELETE_IMAGE_REQUEST,\n    DELETE_IMAGE_SUCCESS,\n    DELETE_IMAGE_FAIL,\n} from \"../constants/imageConstants\"\n\nexport const getImages = (pageNumber = '', pageSize = '') => async (dispatch) => {\n    try {\n        dispatch({\n            type: GET_IMAGES_REQUEST\n        })\n        const {data} =await axios.get(`/api/image?pageNumber=${pageNumber}&pageSize=${pageSize}`)\n        dispatch({\n            type: GET_IMAGES_SUCCESS,\n            payload: data,\n        })\n    } catch (error) {\n        dispatch ({\n            type: GET_IMAGES_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\nexport const createImage = () => async (\n    dispatch, getState\n) => {\n    try {\n        dispatch({ type: CREATE_IMAGE_REQUEST })\n\n        const { userLogin: userInfo } = getState()\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n        const { data } = await axios.post(\"/api/image\", {}, config)\n\n        dispatch({ type: CREATE_IMAGE_SUCCESS, payload: data,})\n    } catch (error) {\n        dispatch ({\n            type: CREATE_IMAGE_FAIL,\n            payload:\n            error.response && error.response.data.message ? error.response.data.message : error.message\n        })\n    }\n}\n\nexport const getImageDetails = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: IMAGE_DETAILS_REQUEST })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const { data } = await axios.get(\n            `/api/image/${id}`, config)\n\n        dispatch({ \n            type: IMAGE_DETAILS_SUCCESS, \n            payload: data })\n    } catch (error) {\n        dispatch ({\n            type: IMAGE_DETAILS_FAIL,\n            payload:\n            error.response && error.response.data.message \n            ? error.response.data.message : error.message\n        })\n    }\n}\n\nexport const deleteImage = (id) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: DELETE_IMAGE_REQUEST })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const { data } = await axios.delete(\n            `/api/image/${id}`, config)\n\n        dispatch({ \n            type: DELETE_IMAGE_SUCCESS, \n            payload: data })\n    } catch (error) {\n        dispatch ({\n            type: DELETE_IMAGE_FAIL,\n            payload:\n            error.response && error.response.data.message \n            ? error.response.data.message : error.message\n        })\n    }\n}\n\nexport const updateImage = (image) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: UPDATE_IMAGE_REQUEST })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const { data } = await axios.put(\n            `/api/image/${image._id}`, image, config)\n\n        dispatch({ \n            type: UPDATE_IMAGE_SUCCESS, \n            payload: data })\n    } catch (error) {\n        dispatch ({\n            type: UPDATE_IMAGE_FAIL,\n            payload:\n            error.response && error.response.data.message \n            ? error.response.data.message : error.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}